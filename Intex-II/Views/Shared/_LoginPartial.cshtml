@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject ILegoRepository Repo


@if (SignInManager.IsSignedIn(User))
{
    var user = await UserManager.GetUserAsync(User);
    var customer = user != null ? Repo.Customers.FirstOrDefault(x => x.CustomerEmail == user.UserName) : null; // Adjust based on your data model

    <p id="manage" class="username" title="Manage">
        Hello, <span id="name-on-profile">@(customer?.CustomerFname ?? user.UserName)</span>!
    </p>
    <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
        <button id="logout" type="submit" class="">Logout</button>
    </form>
    
    
    @* <p id="manage" class="username" title="Manage">Hello <span id="name-on-profile">@UserManager.GetUserName(User)</span> !</p> *@
    @*     <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })"> *@
    @*         <button id="logout" type="submit" class="">Logout</button> *@
    @*     </form> *@

}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}

